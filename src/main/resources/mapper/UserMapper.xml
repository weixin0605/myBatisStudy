<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--使用mappper代理方法，namespace有重要特殊作用-->
<mapper namespace="com.sws.mapper.UserMapper">
    <!--开启本mapper的namespace下的二级缓存
    type:指定cache接口实现类型，mybatis默认实现类为PerpetualCache，
    要和ehcahce整合，需要提供ehcache实现cache接口的实现类-->
    <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
    <select id="findUserByID" parameterType="int" resultType="User">
          select * from user where id = #{id}
    </select>

    <select id="findUserByName" parameterType="java.lang.String" resultType="com.sws.entity.User">
        --SELECT * from user where username like #{username}
          select * from user where name like '%${username}%'
    </select>

    <insert id="insertUser" parameterType="com.sws.entity.User">

        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select last_insert_id()
        </selectKey>
        insert into user(id,username,birthday,sex,address) value (#{id},#{username},#{birthday},#{sex},#{address})
    </insert>
    <!--删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete  from user where id = #{id}
    </delete>
    <!--更新用户-->
    <update id="updateUser" parameterType="java.com.sws.entity.User">
        update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id = #{id}
    </update>

    <!--用户信息的综合查询-->
    <!--#{userCustom.sex}取出包装类型中性别值-->
    <!--${userCustom.username}取出包装类型中姓名值-->
    <!--<select id="findUserList" parameterType="com.sws.entity.UserQueryVo" resultType="com.sws.entity.UserCustom">-->
      <!--select * from user where  user.sex=#{userCustom.sex} and user.username like '%${userCustom.username}%'-->
    <!--</select>-->
    <!--使用sql片段id，如果refid指定id不在本mapper中，需要添加namespace-->
    <select id="findUserList" parameterType="com.sws.entity.UserQueryVo" resultType="com.sws.entity.UserCustom">
    select * from user
      <where>
        <include refid="query_user_where"></include>
      </where>
    </select>

    <!--用户信息综合查询总数-->
    <select id="findUserCount" parameterType="com.sws.entity.UserQueryVo" resultType="int">
         select count(*) from user where  user.sex=#{userCustom.sex} and user.username like '%${userCustom.username}%'
    </select>

    <!--定义resultMap-->
    <!--type:resultMap最终映射的Java对象类型，可以使用别名-->
    <resultMap type="User" id="userResultMap">
        <!--id表示查询结果集中唯一标识-->
        <!--column:查询出来的列名-->
        <!--property:type指定的pojo属性名-->
        <id column="id_" property="id"/>
        <!--result:对普通列的对应-->
        <result column="username_" property="usernamae"/>
    </resultMap>

    <!--使用resultMao进行输出映射-->
    <!--resultMap:指定resultMap的id,如果resultMap在其他mapper文件中,前面需加上namespace-->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        select id id_,username username_ from user where id = #{value}
    </select>

    <!--定义sql片段
    id：唯一标识
    基于单表来定义sql片段，可重用性才高
    在sql片段中不要包括where-->
    <sql id="query_user_where">
        <if test="userCustom.sex != null">
            and user.sex = #{userCustomer.sex}
        </if>
        <if test="user.username != null">
            and user.username like '%${userCustom.username}%'
        </if>
        <if test="ids != null">
            <!-- 使用foreach遍历ids-->
            <!--collection:指定输入对象的集合属性-->
            <!--item:每次遍历生成的对象名-->
            <!--open:开始遍历时拼接字符串-->
            <!--close:结束遍历需要拼接的字符串-->
            <!--separator:遍历过程所需要拼接的字符串-->

            <!--目标:and ( id=1 or id=10 or id=15)-->
            <foreach collection="ids" item="id" open="and (" close=")" separator=" or ">
                <!--每次遍历所需要拼接的字符串-->
                id = #{id}
            </foreach>

            <!--&lt;!&ndash;目标:and id in (1,10,15)&ndash;&gt;-->
            <!--<foreach collection="ids" item="id" open="and id in (" close=")" separator=" ,">-->
                <!--&lt;!&ndash;每次遍历所需要拼接的字符串&ndash;&gt;-->
                <!--#{id}-->
            <!--</foreach>-->
        </if>
    </sql>
</mapper>